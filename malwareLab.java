import java.io.*;
import java.util.Scanner;


public class malwareLab {

    //public static String filePath = "C:/Dosgames/Ultima_5/Ultima_5/SAVED.GAM";//this should be the user input for the file that contains the saved.gam file
    //public static String tempFile = "file.bin";

    //a function that reads in the specified binary file and returns the array of bytes
    public static byte[] readGameFile(String filePath){
        //byte array that wiill be returned later
        byte[] gameArr = new byte[0];
        //try catch block in case the file doesnt exist
        try(
                // object that reads the binary file
                InputStream is = new FileInputStream(filePath)
        ) {
            //read all the bytes
            gameArr = is.readAllBytes();
            //throw exceptions if something goes wrong
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //return full array
        return gameArr;
    }

//function that takes in a byte array and overwritest the file at the specified location
    public static void updateGameFile(byte[] gameArr, String gamePath){
        try {
            // create the output stream
            OutputStream os = new FileOutputStream(gamePath);
            //write out to the file with the given array
            os.write(gameArr);
            //throw errors if something goes wrong
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
// search function to find location of characters by name mainly used for the side characters but will work on the main character as well
    public static int search(byte[] gameArr, String name){
        //ascii values for the alphabet to find the "character markers"
        byte upperA = 65;
        byte upperZ = 90;
        //the array with all the byte values
        byte[] game = gameArr;
        //initiate counters place holders
        int nameOccur = 0;
        int statStart = 0;
        //create name array so that we can compare it to the byte array
        byte[] nam = new byte[name.length()];
        for(int i = 0; i < name.length(); i++){
            char alpha = name.charAt(i);
            int nat = alpha;
            nam[i] = (byte)nat;
        }
        //get the length of the array
        int nameLen = name.length();
        //initiate the counter and a flag
        int j = 0;
        boolean flag = true;
        //iterate through the array looking for a match to the name
        while(j < game.length && flag){
            if(game[j] == nam[nameLen - nameLen] && game[j + 1] == nam[nameLen - (nameLen - 1)] && game[j + 2] == nam[nameLen - (nameLen - 2)]){
                nameOccur = j;
                //if the name hits exit the loop and keep track of where it hit
                flag = false;
            }
            j++;

        }
        nameOccur += (nameLen -1);
        //look for the character marker after the hit number
        boolean marker = true;
        int k = nameOccur;
        while(k < game.length && marker){

            if(Byte.compare(game[k], upperA) >= 0 && Byte.compare(game[k], upperZ) <= 0 && Byte.compare(game[k+1], upperA) >= 0 && Byte.compare(game[k+1], upperZ) <= 0 ){
                //if we get a hit on the marker break out of the loop and keep track of where it is
                statStart = k + 2;
                marker = false;
            }
            k++;

        }
        //return the location of the character marker
        return statStart;
    }
    //function to edit the attribute values of the side character
    public static byte[] editSideCharacter(byte[] og, int str, int intel, int dex, int hp, int maxHp, int exp, String name){
        //get the array
        byte[] newFriend = og;
        //get the starting point of the specified character
        int start = search(newFriend, name);
        //location of the attributes as ints or what number element they are
        int strLoc = start ;
        int intLoc = start + 1;
        int dexLoc = start + 2;
        int hpLoc = start + 4;//also +5 if it is a 2 byte number
        int maxLoc = start + 6;//also +7 if it is a 2 byte number
        int expLoc = start + 8;//also +9 if it is a 2 byte number

        //convert the given integers to bytes
        newFriend[strLoc] = (byte)str;
        newFriend[intLoc] = (byte)intel;
        newFriend[dexLoc] = (byte)dex;
        //if the given integer can be two bytes convert to a hex string
        String hexHp = Integer.toHexString(hp);
        //check the size of the hex string
        if(hexHp.length() > 2) {
            //initiate the ints
            int hp1 = 0;
            int hp2 = 0;
            //if its three letters/numbers
            if(hexHp.length() == 3){
                //take and save the first int/ num
                hp1 = Integer.parseInt(hexHp.substring(0, 1), 16);
                //take and save the second two
                hp2 = Integer.parseInt(hexHp.substring(1), 16);
            }else {
                //if four letters/numbers keep and save first two
                hp1 = Integer.parseInt(hexHp.substring(0, 2), 16);
                //keep and save second two
                hp2 = Integer.parseInt(hexHp.substring(2), 16);
            }
            //convert both sides to bytes and add them to the array in the appropriate spots. second first
            newFriend[hpLoc] = (byte) hp2;
            newFriend[hpLoc + 1] = (byte) hp1;
        }else{
            //if the value can be a single byte change it to a byte and add it
            newFriend[hpLoc] = (byte)hp;
        }
        //repeat same process for max hp as used in hp
        String hexMaxHp = Integer.toHexString(maxHp);
        if(hexMaxHp.length() > 2){
            int mhp1 = 0;
            int mhp2 = 0;
            if(hexMaxHp.length() == 3){
                mhp1 = Integer.parseInt(hexMaxHp.substring(0, 1), 16);
                mhp2 = Integer.parseInt(hexMaxHp.substring(1), 16);
            }else {
                mhp1 = Integer.parseInt(hexMaxHp.substring(0, 2), 16);
                mhp2 = Integer.parseInt(hexMaxHp.substring(2), 16);
            }
            newFriend[maxLoc] = (byte)mhp2;
            newFriend[maxLoc + 1] = (byte)mhp1;
        }else{
            newFriend[maxLoc] = (byte)maxHp;
        }
        //repeat same process as in the hp for exp
        String hexExp = Integer.toHexString(exp);
        if(hexExp.length() > 2){
            int exp1 = 0;
            int exp2 = 0;
            if(hexExp.length() == 3){
                exp1 = Integer.parseInt(hexExp.substring(0, 1), 16);
                exp2 = Integer.parseInt(hexExp.substring(1), 16);
            }else {
                exp1 = Integer.parseInt(hexExp.substring(0, 2), 16);
                exp2 = Integer.parseInt(hexExp.substring(2), 16);
            }
            newFriend[expLoc] = (byte)exp2;
            newFriend[expLoc + 1] = (byte)exp1;
        }else{
            newFriend[expLoc] = (byte)exp;
        }

        //return the array of bytes that has been altered
        return newFriend;
    }


    //same function for the side characters just for the main character
    public static byte[]  editMainCharacter(byte[] og, int str, int intel, int dex, int hp, int maxHp, int exp){
        byte[] file = og;
        //all values that are desired to be changed
        //for all single byte values convert and add
        //mzx of 255
        byte stre = (byte)str;
        file[14] = stre;

        //max of 255
        byte inteleg = (byte)intel;
        file[15] =  inteleg;

        //max of 255
        byte dexte = (byte)dex;
        file[16] = dexte;

        //max of 65535
        //same as in side character just edit them as necessary
        String health = Integer.toHexString(hp);
        if(health.length() > 2){
            int hea1 = 0;
            int hea2 = 0;
            if(health.length() == 3){
                hea1 = Integer.parseInt(health.substring(0, 1), 16);
                hea2 = Integer.parseInt(health.substring(1), 16);
            }else {
                hea1 = Integer.parseInt(health.substring(0, 2), 16);
                hea2 = Integer.parseInt(health.substring(2), 16);
            }
            byte health1 = (byte)hea1;
            byte health2 = (byte)hea2;

            file[18] = health2;
            file[19] = health1;
        }else{

            byte heal = (byte)hp;
            file[18] = heal;
        }
        //max of 65535
        String maxHealth = Integer.toHexString(maxHp);
        if(maxHealth.length() > 2){
            int mHea1 = 0;
            int mHea2 = 0;
            if(maxHealth.length() == 3){
                mHea1 = Integer.parseInt(maxHealth.substring(0, 1), 16);
                mHea2 = Integer.parseInt(maxHealth.substring(1), 16);
            }else {
                mHea1 = Integer.parseInt(maxHealth.substring(0, 2), 16);
                mHea2 = Integer.parseInt(maxHealth.substring(2), 16);
            }
            byte mHealth1 = (byte)mHea1;
            byte mHealth2 = (byte)mHea2;

            file[20] = mHealth2;
            file[21] = mHealth1;
        }else{

            byte mHeal = (byte)maxHp;
            file[20] = mHeal;

        }
        //max of 65535
        String experience = Integer.toHexString(exp);
        if(experience.length() > 2){
            int ex1 = 0;
            int ex2 = 0;
            if(experience.length() == 3){
                ex1 = Integer.parseInt(experience.substring(0, 1), 16);
                ex2 = Integer.parseInt(experience.substring(1), 16);
            }else {
                ex1 = Integer.parseInt(experience.substring(0, 2), 16);
                ex2 = Integer.parseInt(experience.substring(2), 16);
            }
            byte exp1 = (byte)ex1;
            byte exp2 = (byte)ex2;

            file[22] = exp2;
            file[23] = exp1;
        }else{

            byte exper = (byte)exp;
            file[22] = exper;

        }
    //return edited array
    return file;
    }
    //function to edit any items in the file
    public static byte[] items(byte[] og, int gold, int keys, int gems, int mgkCarpet, int skullKys, int blkBadge, int mgkAxe){
        //an instance of the original array
        byte[] shopKeep = og;
        //locations of all desired items
        int goldLoc = 516;
        int keyLoc = 518;
        int gemLoc = 519;
        int carpetLoc = 522;
        int skullKeyLoc = 523;
        int blkBadgeLoc = 536;
        int axeLoc = 576;
        //treat the gold as we treated the two byte hex values above in the main and side characters
        String goldHex = Integer.toHexString(gold);
        if(goldHex.length() > 2){
            int gold1 = 0;
            int gold2 = 0;
            if(goldHex.length() == 3){
                gold1 = Integer.parseInt(goldHex.substring(0, 1), 16);
                gold2 = Integer.parseInt(goldHex.substring(1), 16);
            }else {
                gold1 = Integer.parseInt(goldHex.substring(0, 2), 16);
                gold2 = Integer.parseInt(goldHex.substring(2), 16);
            }
            og[goldLoc] = (byte)gold2;
            og[goldLoc + 1] = (byte)gold1;

        }else{
            og[goldLoc] =  (byte)gold;
        }
        //treat all other values as one byte values that we can convert to bytes and add them to their locations
        shopKeep[keyLoc] = (byte)keys;
        shopKeep[gemLoc] = (byte)gems;
        shopKeep[carpetLoc] = (byte)mgkCarpet;
        shopKeep[skullKeyLoc] = (byte)skullKys;
        shopKeep[blkBadgeLoc] = (byte)blkBadge;
        shopKeep[axeLoc] = (byte)mgkAxe;
        //return the updated array
        return shopKeep;

    }

    public static void main(String[] args){
        //create a scanner to accept user inputs
        Scanner in = new Scanner(System.in);
        System.out.println("Please enter the full path to the SAVED.GAM file in your ultima five folder:");
        //get full path to the file on the users computer
        String fullFilePath = in.nextLine();
        //create the original array
        byte[] og = readGameFile(fullFilePath);
        //make a copy of the file so that we keep the original intact just incase
        byte[] altered = new byte[og.length];
        for(int i = 0; i < altered.length; i++){
            altered[i] = og[i];
        }
        //initiate menu variables
        int menuChoice = 0;
        String customOptions;
        //keep asking questions until the user says to stop
        while(menuChoice != 4) {
            //display menu options
            System.out.println("Main Menu:\n");
            System.out.println("[1]Edit Main Character\n[2]Edit Side Character\n[3]Edit Inventory\n[4]End and Export\n");
            menuChoice = in.nextInt();
            in.nextLine();
            //if the user wants to edit the main character decide if they want the preset or custom
            if(menuChoice == 1){
                System.out.println("Would you like [a] custom alterations or [b] to change you main character to superman?:");
                customOptions = in.nextLine();
                //if custom get all values and call main character edditer
                if(customOptions == "a" || customOptions == "A"){
                    System.out.println("please enter desired strength(1-255):");
                    int strength = in.nextInt();
                    System.out.println("please enter desired intelegence(1-255):");
                    int intelegence = in.nextInt();
                    System.out.println("please enter desired dexterity(1-255):");
                    int dexterity = in.nextInt();
                    System.out.println("please enter desired health(1-65535):");
                    int health = in.nextInt();
                    System.out.println("please enter desired max health(1-65535):");
                    int maxHealth = in.nextInt();
                    System.out.println("please enter desired experience(1-65535):");
                    int experience = in.nextInt();
                    editMainCharacter(altered, strength, intelegence, dexterity, health, maxHealth, experience);
                }else{
                    //if they want the preset call main character editor with preset values
                    editMainCharacter(altered,99, 99, 99, 999, 999, 9999);
                    System.out.println("edited to superman settings");
                }

                System.out.println("edited main char\n");
                //if they want to edit a side character
            }else if(menuChoice == 2){
                //get side characters name
                System.out.println("Please enter desired character's name(exactly as shown in the game. CASE SENSITIVE):");
                String charName = in.nextLine();
                //also see if they want to edit the character with custom values or preset values
                System.out.println("would you like to edit this side character to [a] custom or [b] superman settings:");
                String option = in.nextLine();
                //if custom get the values and run the side character editor with the values and name
                if(option == "a" || option == "A"){
                    System.out.println("please enter desired strength(1-255):");
                    int strength = in.nextInt();
                    System.out.println("please enter desired intelegence(1-255):");
                    int intelegence = in.nextInt();
                    System.out.println("please enter desired dexterity(1-255):");
                    int dexterity = in.nextInt();
                    System.out.println("please enter desired health(1-65535):");
                    int health = in.nextInt();
                    System.out.println("please enter desired max health(1-65535):");
                    int maxHealth = in.nextInt();
                    System.out.println("please enter desired experience(1-65535):");
                    int experience = in.nextInt();
                    editSideCharacter(altered, strength, intelegence, dexterity, health, maxHealth, experience, charName);
                }else{
                    // if preset run side character editor with preset values and name
                    editSideCharacter(altered,99, 99, 99, 999, 999, 9999, charName);
                    System.out.println("edited to superman settings");
                }

                System.out.println("edited side character\n");
                // if they want to edit items get values for item quantities
            }else if (menuChoice == 3){
                System.out.println("how much gold do you want(1-65535):");
                int gold = in.nextInt();
                System.out.println("how many keys do you want(1-255):");
                int keys = in.nextInt();
                System.out.println("how manyy gems do you want(1-255):");
                int gems = in.nextInt();
                System.out.println("how many magic carpets do you want(1-255):");
                int magicCarpets = in.nextInt();
                System.out.println("how many skull keys do you want(1-255):");
                int skullKeys = in.nextInt();
                System.out.println("how many black badges do you want(1-255):");
                int blackBadges = in.nextInt();
                System.out.println("how many magic axes do you want(1-255):");
                int magicAxes = in.nextInt();
                // run item editor
                items(altered, gold, keys, gems, magicCarpets, skullKeys, blackBadges, magicAxes);
                System.out.println("edited items\n");
            }else if(menuChoice == 4){
                // if they want to quit display message
                System.out.println("leaving program please run your game to see changes\n");
            }
        }
        //export here
        updateGameFile(altered, fullFilePath);
    }
}